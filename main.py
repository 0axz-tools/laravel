import argparse
import time
import threading
from datetime import datetime
from colorama import Fore, Back, Style, init
import os
import json
from queue import Queue
import concurrent.futures
import sys

# Tambahkan path ke modules
current_dir = os.path.dirname(os.path.abspath(__file__))
modules_path = os.path.join(current_dir, 'modules')
sys.path.insert(0, modules_path)

init(autoreset=True)

# Import modules setelah menambahkan path
try:
    from detect_laravel import is_laravel
    from env_exposure import scan as scan_env
    from cve_2021_3129 import scan as scan_ignition
    from cve_2024_52301 import scan as scan_env_inject
    from cve_2024_29291 import scan as scan_debug_exposure
    from sqli_time_api import scan as scan_sqli_time
    from git_exposure import scan as scan_git_exposure
    from log_exposure import scan as scan_log_exposure
    from env_backup_exposure import scan as scan_env_backup
    from phpinfo_exposure import scan as scan_phpinfo
    from debug_tools_exposure import scan as scan_debugtools
    from routes_exposure import scan as scan_routes
    from token_leakage import scan as scan_tokens
    from deserialization_poi import scan as scan_poi
    from laravel_filemanager_exposure import scan_detailed
    from queue_deserialization_rce import scan_detailed as scan_queue_deserialization
    from mass_assignment_checker import scan as scan_mass_assignment
except ImportError as e:
    print(f"{Fore.RED}Error importing modules: {e}")
    print(f"{Fore.YELLOW}Make sure all module files exist in the 'modules' directory")
    sys.exit(1)

# Global variables for results and file handling
results_lock = threading.Lock()
vulnerable_urls = set()
output_files = {}
result_dir = ""

# Mapping vulnerability types to filenames
VULN_FILES = {
    'env_exposure': 'env_exposure.txt',
    'cve_2021_3129': 'cve_2021_3129_ignition_rce.txt',
    'cve_2024_52301': 'cve_2024_52301_env_injection.txt',
    'cve_2024_29291': 'cve_2024_29291_debug_exposure.txt',
    'sqli_time': 'sqli_time_based.txt',
    'git_exposure': 'git_exposure.txt',
    'log_exposure': 'log_exposure.txt',
    'env_backup': 'env_backup_exposure.txt',
    'phpinfo': 'phpinfo_exposure.txt',
    'debug_tools': 'debug_tools_exposure.txt',
    'routes_exposure': 'routes_exposure.txt',
    'token_leakage': 'token_leakage.txt',
    'poi': 'php_object_injection.txt',
    'laravel_filemanager': 'laravel_filemanager_exposure.txt',
    'queue_deserialization': 'queue_deserialization_rce.txt',
    'mass_assignment': 'mass_assignment.txt'
}

def init_output_files():
    """Initialize output files for different vulnerability types"""
    global result_dir
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    result_dir = f"scan_results_{timestamp}"
    os.makedirs(result_dir, exist_ok=True)
    
    # Create subdirectory for vulnerability files
    vuln_dir = os.path.join(result_dir, "vulnerabilities")
    os.makedirs(vuln_dir, exist_ok=True)
    
    output_files = {}
    
    # Create individual vulnerability files
    for vuln_type, filename in VULN_FILES.items():
        file_path = os.path.join(vuln_dir, filename)
        output_files[vuln_type] = open(file_path, "w", encoding='utf-8')
        # Write header for each file
        output_files[vuln_type].write(f"# {vuln_type.upper().replace('_', ' ')} Results\n")
        output_files[vuln_type].write(f"# Scan Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        output_files[vuln_type].write(f"# Generated by Laravel Vulnerability Scanner\n")
        output_files[vuln_type].write("#" * 80 + "\n\n")
    
    # Create summary files
    output_files['critical'] = open(os.path.join(result_dir, "critical_vulns.txt"), "w", encoding='utf-8')
    output_files['high'] = open(os.path.join(result_dir, "high_vulns.txt"), "w", encoding='utf-8')
    output_files['all'] = open(os.path.join(result_dir, "all_results.json"), "w", encoding='utf-8')
    output_files['summary'] = open(os.path.join(result_dir, "scan_summary.txt"), "w", encoding='utf-8')
    output_files['vulnerable_urls'] = open(os.path.join(result_dir, "vulnerable_urls.txt"), "w", encoding='utf-8')
    
    return output_files

def close_output_files():
    """Close all output files"""
    for file in output_files.values():
        if hasattr(file, 'close'):
            file.close()

def save_vulnerability(url, vuln_type, details, severity="critical"):
    """Save vulnerability to appropriate files"""
    with results_lock:
        # Save to specific vulnerability file
        if vuln_type in output_files:
            vuln_file = output_files[vuln_type]
            vuln_file.write(f"[{severity.upper()}] {url}\n")
            vuln_file.write(f"URL: {details.get('url', url)}\n")
            vuln_file.write(f"Path: {details.get('path', 'N/A')}\n")
            vuln_file.write(f"Status: {details.get('http_status', details.get('status_code', 'N/A'))}\n")
            
            # Add specific details based on vulnerability type
            if 'variables' in details:
                vuln_file.write(f"Variables: {', '.join(details['variables'])}\n")
            if 'detected_strings' in details:
                vuln_file.write(f"Detected: {', '.join(details['detected_strings'])}\n")
            if 'delay' in details:
                vuln_file.write(f"Delay: {details['delay']} seconds\n")
            if 'payload' in details:
                vuln_file.write(f"Payload: {details['payload']}\n")
            
            vuln_file.write(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            vuln_file.write("-" * 80 + "\n\n")
            vuln_file.flush()
        
        # Save to severity file
        output_files[severity].write(f"[{vuln_type}] {url}\n")
        output_files[severity].flush()
        
        # Save to all results JSON
        result_data = {
            'url': url,
            'type': vuln_type,
            'severity': severity,
            'details': details,
            'timestamp': datetime.now().isoformat()
        }
        output_files['all'].write(json.dumps(result_data) + "\n")
        output_files['all'].flush()
        
        # Save to vulnerable URLs list
        if url not in vulnerable_urls:
            vulnerable_urls.add(url)
            output_files['vulnerable_urls'].write(f"{url}\n")
            output_files['vulnerable_urls'].flush()

def show_banner():
    print(f"""
{Fore.CYAN}{Style.BRIGHT}══════════════════════════════════════════════════════════════════════
                                                                                             
    {Fore.RED}██╗      █████╗ ██████╗  █████╗ ██╗   ██╗███████╗██╗                           
    {Fore.RED}██║     ██╔══██╗██╔══██╗██╔══██╗██║   ██║██╔════╝██║                           
    {Fore.RED}██║     ███████║██████╔╝███████║██║   ██║█████╗  ██║                           
    {Fore.RED}██║     ██╔══██║██╔══██╗██╔══██║╚██╗ ██╔╝██╔══╝  ██║                           
    {Fore.RED}███████╗██║  ██║██║  ██║██║  ██║ ╚████╔╝ ███████╗███████╗                      
    {Fore.RED}╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚══════╝                      
                                                                                             
              {Fore.YELLOW} VULNERABILITY SCANNER - MULTI THREADED                	      
                                                                                             
         {Fore.GREEN} Developed by: Ebrahim                                                
         {Fore.BLUE} GitHub: github.com/codebyebrahim                                      
         {Fore.MAGENTA} Scan Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}          
                                                                                             
    {Fore.WHITE}         Laravel Security Assessment Tool                               
                                                                                             
{Fore.CYAN}══════════════════════════════════════════════════════════════════════{Style.RESET_ALL}
    """)

def print_separator():
    print(f"{Fore.CYAN}{'='*70}{Style.RESET_ALL}")

def print_status(message, status_type="info"):
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    if status_type == "info":
        print(f"{Fore.CYAN}[{timestamp}] {Fore.BLUE}[•] {Fore.WHITE}{message}{Style.RESET_ALL}")
    elif status_type == "success":
        print(f"{Fore.CYAN}[{timestamp}] {Fore.GREEN}[•] {Fore.WHITE}{message}{Style.RESET_ALL}")
    elif status_type == "warning":
        print(f"{Fore.CYAN}[{timestamp}] {Fore.YELLOW}[!] {Fore.WHITE}{message}{Style.RESET_ALL}")
    elif status_type == "critical":
        print(f"{Fore.CYAN}[{timestamp}] {Fore.RED}[CRITICAL] {Fore.WHITE}{message}{Style.RESET_ALL}")
    elif status_type == "high":
        print(f"{Fore.CYAN}[{timestamp}] {Fore.MAGENTA}[HIGH] {Fore.WHITE}{message}{Style.RESET_ALL}")
    elif status_type == "error":
        print(f"{Fore.CYAN}[{timestamp}] {Fore.RED}[✗] {Fore.WHITE}{message}{Style.RESET_ALL}")

def scan_single_url(target_url, thread_id=0):
    """Scan a single URL for vulnerabilities"""
    print_status(f"Thread-{thread_id}: Scanning {target_url}", "info")
    
    results = {
        'url': target_url,
        'is_laravel': False,
        'vulnerabilities': []
    }
    
    # Check if it's a Laravel application
    if not is_laravel(target_url):
        print_status(f"Thread-{thread_id}: {target_url} is NOT Laravel", "warning")
        return results
    
    results['is_laravel'] = True
    print_status(f"Thread-{thread_id}: Laravel detected on {target_url}", "success")
    
    # Define all scanners with their types and severity
    scanners = [
        ("env_exposure", ".env file exposure", scan_env, "critical"),
        ("cve_2021_3129", "Ignition RCE (CVE-2021-3129)", scan_ignition, "critical"),
        ("cve_2024_52301", "Environment Session Injection (CVE-2024-52301)", scan_env_inject, "critical"),
        ("cve_2024_29291", "Debug Information Exposure (CVE-2024-29291)", scan_debug_exposure, "critical"),
        ("sqli_time", "Time-Based SQL Injection", scan_sqli_time, "high"),
        ("git_exposure", "Git directory exposure", scan_git_exposure, "critical"),
        ("log_exposure", "Laravel log file exposure", scan_log_exposure, "critical"),
        ("env_backup", "Environment backup files", scan_env_backup, "critical"),
        ("phpinfo", "PHPinfo exposure", scan_phpinfo, "critical"),
        ("debug_tools", "Debug tools exposure", scan_debugtools, "critical"),
        ("routes_exposure", "Route file exposure", scan_routes, "critical"),
        ("token_leakage", "Token leakage", scan_tokens, "high"),
        ("poi", "PHP Object Injection", scan_poi, "high"),
        ("laravel_filemanager", "Laravel File Manager exposure", scan_detailed, "critical"),
        ("queue_deserialization", "Queue Deserialization RCE", scan_queue_deserialization, "critical"),
        ("mass_assignment", "Mass Assignment vulnerabilities", scan_mass_assignment, "high")
    ]
    
    for vuln_type, scan_name, scan_func, severity in scanners:
        try:
            print_status(f"Thread-{thread_id}: Testing {scan_name} on {target_url}", "info")
            scan_result = scan_func(target_url)
            
            if scan_result:
                vuln_details = {
                    'type': scan_name,
                    'vuln_type': vuln_type,
                    'severity': severity,
                    'details': scan_result
                }
                results['vulnerabilities'].append(vuln_details)
                
                # Save immediately to specific vulnerability file
                save_vulnerability(target_url, vuln_type, scan_result, severity)
                print_status(f"Thread-{thread_id}: {scan_name} FOUND on {target_url}", "critical")
                
        except Exception as e:
            print_status(f"Thread-{thread_id}: Error scanning {scan_name} on {target_url}: {str(e)}", "error")
    
    return results

def worker(url_queue, thread_id, results_list):
    """Worker thread function"""
    while not url_queue.empty():
        try:
            target_url = url_queue.get_nowait()
        except:
            break
            
        try:
            result = scan_single_url(target_url, thread_id)
            results_list.append(result)
        except Exception as e:
            print_status(f"Thread-{thread_id}: Error scanning {target_url}: {str(e)}", "error")
        finally:
            url_queue.task_done()

def load_urls_from_file(filename):
    """Load URLs from file"""
    urls = []
    try:
        with open(filename, 'r') as f:
            for line in f:
                url = line.strip()
                if url and not url.startswith('#'):
                    if not url.startswith(('http://', 'https://')):
                        url = 'http://' + url
                    urls.append(url)
    except FileNotFoundError:
        print_status(f"File not found: {filename}", "error")
    except Exception as e:
        print_status(f"Error reading file {filename}: {str(e)}", "error")
    
    return urls

def main():
    global output_files, result_dir
    
    show_banner()
    print_separator()

    parser = argparse.ArgumentParser(description="Laravel Vulnerability Scanner - Multi Threaded")
    parser.add_argument("urlist", nargs="?", help="File containing list of URLs")
    parser.add_argument("threads", nargs="?", type=int, default=10, help="Number of threads (default: 10)")
    args = parser.parse_args()

    if not args.urlist:
        print(f"{Fore.YELLOW}[?] Enter path to URL list file: {Style.RESET_ALL}", end="")
        args.urlist = input().strip()

    if not args.urlist:
        print_status("No URL list provided!", "error")
        return

    # Initialize output files
    output_files = init_output_files()
    
    try:
        # Load URLs
        urls = load_urls_from_file(args.urlist)
        if not urls:
            print_status("No valid URLs found in the file!", "error")
            return

        print_status(f"Loaded {len(urls)} URLs from {args.urlist}", "success")
        print_status(f"Using {args.threads} threads", "info")
        print_status(f"Results will be saved to: {result_dir}", "info")
        print_separator()

        # Create queue and add URLs
        url_queue = Queue()
        for url in urls:
            url_queue.put(url)

        # Start threads
        results_list = []
        threads = []

        start_time = time.time()

        with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as executor:
            futures = []
            for i in range(args.threads):
                future = executor.submit(worker, url_queue, i, results_list)
                futures.append(future)
            
            # Wait for all threads to complete
            concurrent.futures.wait(futures)

        # Calculate statistics
        total_time = time.time() - start_time
        total_urls = len(urls)
        laravel_urls = sum(1 for r in results_list if r.get('is_laravel'))
        vulnerable_count = len(vulnerable_urls)

        # Count vulnerabilities by type
        vuln_counts = {}
        for vuln_type in VULN_FILES.keys():
            count = len([v for r in results_list for v in r.get('vulnerabilities', []) if v.get('vuln_type') == vuln_type])
            vuln_counts[vuln_type] = count

        # Save summary
        summary = f"""
Scan Summary
============
Scan Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
URL List: {args.urlist}
Threads: {args.threads}
Total URLs: {total_urls}
Laravel Applications: {laravel_urls}
Vulnerable URLs: {vulnerable_count}
Total Time: {total_time:.2f} seconds
Results Directory: {result_dir}

Vulnerabilities Found by Type:
- .env Exposure: {vuln_counts['env_exposure']}
- CVE-2021-3129 (Ignition RCE): {vuln_counts['cve_2021_3129']}
- CVE-2024-52301 (Env Injection): {vuln_counts['cve_2024_52301']}
- CVE-2024-29291 (Debug Exposure): {vuln_counts['cve_2024_29291']}
- SQL Injection: {vuln_counts['sqli_time']}
- Git Exposure: {vuln_counts['git_exposure']}
- Log Exposure: {vuln_counts['log_exposure']}
- Env Backup: {vuln_counts['env_backup']}
- PHPInfo: {vuln_counts['phpinfo']}
- Debug Tools: {vuln_counts['debug_tools']}
- Routes Exposure: {vuln_counts['routes_exposure']}
- Token Leakage: {vuln_counts['token_leakage']}
- PHP Object Injection: {vuln_counts['poi']}
- File Manager: {vuln_counts['laravel_filemanager']}
- Queue Deserialization: {vuln_counts['queue_deserialization']}
- Mass Assignment: {vuln_counts['mass_assignment']}

Total Critical: {sum(vuln_counts.values())}
"""
        output_files['summary'].write(summary)
        output_files['summary'].flush()

        # Print final summary
        print_separator()
        print_status("Scan completed!", "success")
        print_status(f"Total URLs scanned: {total_urls}", "info")
        print_status(f"Laravel applications found: {laravel_urls}", "info")
        print_status(f"Vulnerable URLs: {vulnerable_count}", "critical" if vulnerable_count > 0 else "success")
        print_status(f"Time taken: {total_time:.2f} seconds", "info")
        print_status(f"Results saved to: {result_dir}", "success")

        # Show results by vulnerability type
        print_separator()
        print_status("VULNERABILITIES FOUND BY TYPE:", "critical")
        for vuln_type, count in vuln_counts.items():
            if count > 0:
                filename = VULN_FILES[vuln_type]
                print(f"  {Fore.RED}• {vuln_type}: {count} → {result_dir}/vulnerabilities/{filename}")

        # Show vulnerable URLs
        if vulnerable_urls:
            print_separator()
            print_status("VULNERABLE URLs:", "critical")
            for url in vulnerable_urls:
                print(f"  {Fore.RED}• {url}")

    except KeyboardInterrupt:
        print_status("Scan interrupted by user", "warning")
    except Exception as e:
        print_status(f"Unexpected error: {str(e)}", "error")
    finally:
        close_output_files()
        print_separator()
        print_status("Scanner shutdown complete", "info")

if __name__ == "__main__":
    main()
